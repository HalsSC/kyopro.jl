"""
Permutation Algorithms

This program implements the next_permutation! and prev_permutation! functions for generating the next and previous permutations of a given sequence.

Functions:
- next_permutation!: Modifies the sequence in-place to generate the lexicographically next permutation.
- prev_permutation!: Modifies the sequence in-place to generate the lexicographically previous permutation.

Algorithm:
- The functions use a modified version of the Narayana Pandita algorithm to generate the next and previous permutations.

Author: hals
Date: 2023/6/21

Note: This comment is generated by ChatGPT.
Note: return true/falseのあたりは多分壊れています
"""

# next_permutation! and prev_permutation! function implementations go here...
function next_permutation!(a::AbstractArray)
    length(a) < 2 && return false
    for i = length(a)-1:-1:1
        if a[i] < a[i+1]
            j = length(a)
            while !(a[i] < a[j])
                j -= 1
            end
            a[i], a[j] = a[j], a[i]
            reverse!(a, i + 1)
            return true
        end
    end
    reverse!(a)
    return false
end

function prev_permutation!(a::AbstractArray)
    length(a) < 2 && return false
    for i = length(a)-1:-1:1
        if a[i] > a[i+1]
            j = length(a)
            while !(a[i] > a[j])
                j -= 1
            end
            a[i], a[j] = a[j], a[i]
            reverse!(a, i + 1)
            return true
        end
    end
    reverse!(a)
    return false
end

function main()
    a = [1, 2, 3, 4, 5]
    next_permutation!(a)    # [1, 2, 3, 5, 4]
    next_permutation!(a)    # [1, 2, 4, 3, 5]

    a = [5, 4, 3, 2, 1]
    next_permutation!(a)    # [1, 2, 3, 4, 5]

    a = ["a", "b", "d", "c"]
    prev_permutation!(a)    # ["a", "b", "c", "d"]
end

main()
